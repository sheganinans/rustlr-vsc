{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "rustlr",
  "patterns": [
    {
      "include": "#comment"
    },
    {
      "include": "#eof-comment"
    },
    {
      "include": "#lit-include-1"
    },
    {
      "include": "#lit-include-2"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#ops"
    },
    {
      "include": "#constructor"
    },
    {
      "include": "#lit-tokens"
    },
    {
      "include": "#bind-name"
    },
    {
      "include": "#add-custom"
    },
    {
      "include": "#lifetime"
    },
    {
      "include": "#ids"
    }
  ],
  "repository": {
    "add-custom": {
      "patterns": [
        {
          "match": "add_custom",
          "name": "entity.name.function.add-custom.rustlr"
        }
      ]
    },
    "bind-name": {
      "patterns": [
        {
          "match": "(?<=:)[\\p{Letter}_]+",
          "name": "support.type.bind-name.rustlr"
        }
      ]
    },
    "comment": {
      "begin": "#",
      "end": "$",
      "name": "comment.line.rustlr"
    },
    "constructor": {
      "patterns": [
        {
          "match": "(?<!^)(\\(\\)|bool|i8|u8|i16|u16|i32|u32|i64|u64|usize|isize|f32|f64|char|\\(usize,usize\\)|str|String|LC|Vec|\\p{Upper}[\\p{Letter}]*(?=\\()|(?<=externtype\\s)[\\p{Letter}_]+(?=<))(?!(\\w|_))",
          "name": "support.type.constructor.rustlr"
        }
      ]
    },
    "eof-comment": {
      "begin": "^EOF",
      "end": "",
      "name": "comment.eof.rustlr"
    },
    "ids": {
      "patterns": [
        {
          "match": "[\\p{Letter}_]+[\\p{Letter}_\\d]",
          "name": "variable.id.rustlr"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "match": "^(grammarname|auto|genabsyn|auto-bump|terminals|terminal|typedterminal|nonterminals|typednonterminal|nonterminal|topsym|startsymbol|flatten|errsym|recover|resynch|resync|lifetime|absyntype|externtype|externaltype|left|right|nonassoc|lexname|lexvalue|valueterminal|valterminal|lexterminal|lexattribute|lexconditional|variant-group-for|operator-group-for)",
          "name": "keyword.control.rustlr"
        }
      ]
    },
    "lifetime": {
      "patterns": [
        {
          "match": "'[\\p{Lower}_]+",
          "name": "storage.modifier.lifetime.rustlr"
        }
      ]
    },
    "lit-include-1": {
      "begin": "^\\$",
      "end": "$",
      "name": "entity.name.function.lit-include-1.rustlr"
    },
    "lit-include-2": {
      "begin": "^!",
      "end": "$",
      "name": "entity.name.function.lit-include-2.rustlr"
    },
    "lit-tokens": {
      "patterns": [
        {
          "match": "(?<!\\w)[\\p{Upper}_]+(?!\\w)",
          "name": "constant.language.rustlr"
        }
      ]
    },
    "ops": {
      "patterns": [
        {
          "match": "[~!@#$%^&*-+=|:;,<.>?/]+",
          "name": "entity.name.function.operator.rustlr"
        }
      ]
    },
    "strings": {
      "begin": "r?\"",
      "end": "\"",
      "patterns": [
        {
          "match": ".",
          "name": "constant.character.escape.rustlr"
        }
      ]
    }
  },
  "scopeName": "source.rustlr"
}
